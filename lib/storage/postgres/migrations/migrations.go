// Package migrations Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// 1_initialize.down.sql
// 1_initialize.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_initializeDownSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xcb\x49\x2c\x29\xb6\x06\x04\x00\x00\xff\xff\x3e\xf6\xd8\x61\x11\x00\x00\x00"

func _1_initializeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_initializeDownSql,
		"1_initialize.down.sql",
	)
}

func _1_initializeDownSql() (*asset, error) {
	bytes, err := _1_initializeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_initialize.down.sql", size: 17, mode: os.FileMode(420), modTime: time.Unix(1589302322, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_initializeUpSql = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd0\xc1\x4e\xf3\x30\x0c\x07\xf0\x7b\x9f\xc2\xc7\xef\x93\x78\x03\x4e\x03\xf5\x86\x38\xa0\xdd\x23\xb7\xf1\xc0\x22\xb1\x8b\xed\x8a\xed\xed\x51\xd6\xa9\xac\x1b\x47\xff\xe4\xfc\xf3\x4f\x9e\xdf\xfa\xdd\xbe\x87\xfd\xee\xe9\xa5\x87\x43\xc1\x70\xf8\xd7\x01\x70\x06\x27\x63\x2c\x0f\x1d\x00\x1a\x21\x04\x1d\xa3\x0d\x05\x25\xa7\x8a\xf6\xb9\x0a\xe6\x6c\xe4\xbe\xce\x1f\x5a\xe9\x75\xae\x03\x19\xb0\x04\xbd\x93\x35\x6d\xd9\x49\x16\xf6\x8a\xa5\xb0\x9c\xb7\x27\xe3\x91\x52\x65\xb9\x5e\xbe\x20\x1e\xaf\xd1\x54\xab\xa7\x51\x67\x89\x4d\xc2\xe2\x71\x9a\x68\xad\x70\x28\xaa\xdb\x6b\xce\xf2\xc7\x61\xff\x9a\xd1\xe8\xae\xe8\x26\xcd\x03\xe3\x77\x0a\xe5\x42\x37\x1b\x17\xbb\x8f\x1f\x66\x2e\x39\x9d\x08\xb7\x6d\xb8\xbd\xc3\x84\x0c\x06\xd5\x42\x28\x0d\x33\xf9\x68\x3c\x05\xab\xac\xc1\xfa\x2d\x64\x49\xb0\xd2\x2d\x2d\x3f\xd9\xb0\xfb\xff\xd8\xfd\x04\x00\x00\xff\xff\x76\x03\x2f\x87\xc7\x01\x00\x00"

func _1_initializeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_initializeUpSql,
		"1_initialize.up.sql",
	)
}

func _1_initializeUpSql() (*asset, error) {
	bytes, err := _1_initializeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_initialize.up.sql", size: 455, mode: os.FileMode(420), modTime: time.Unix(1590226333, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_initialize.down.sql": _1_initializeDownSql,
	"1_initialize.up.sql":   _1_initializeUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1_initialize.down.sql": &bintree{_1_initializeDownSql, map[string]*bintree{}},
	"1_initialize.up.sql":   &bintree{_1_initializeUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
